{"version":3,"sources":["data/category.js","Components/Header/Header.js","Components/Definitions/Definitions.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["categories","value","label","Header","setCategory","category","word","setWord","LightMode","darkTheme","createMuiTheme","palette","primary","main","type","className","ThemeProvider","theme","TextField","onChange","e","target","select","language","map","option","MenuItem","Definitions","meanings","src","phonetics","audio","style","backgroundColor","borderRadius","controls","mean","item","definitions","def","color","definition","width","example","fontFamily","fontWeight","synonyms","s","App","useState","setMeanings","setLightMode","DarkMode","withStyles","switchBase","grey","checked","track","Switch","dictionaryApi","a","axios","get","data","console","log","useEffect","height","transition","Container","maxWidth","display","flexDirection","justifyContent","position","top","right","paddingTop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"uRAeeA,G,MAfI,CACjB,CAAEC,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,QAASC,MAAO,MACzB,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,WAAYC,MAAO,MAC5B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,MAC3B,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,uBAAwBC,MAAO,SACxC,CAAED,MAAO,SAAUC,MAAO,MAC1B,CAAED,MAAO,UAAWC,MAAO,Q,OCgDdC,EApDA,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,YAAaC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAE9CC,EAAYC,YAAe,CAC7BC,QAAS,CACLC,QAAS,CACLC,KAAML,EAAY,OAAS,QAE/BM,KAAMN,EAAY,QAAU,UAWpC,OAEI,cADA,CACA,OAAKO,UAAU,SAAf,UAEI,uBAAMA,UAAU,QAAhB,UAAyBT,GAAc,YAAvC,OACA,qBAAKS,UAAU,SAAf,SAEI,eAACC,EAAA,EAAD,CAAeC,MAAOR,EAAtB,UAEI,cAACS,EAAA,EAAD,CACIH,UAAU,SACVb,MAAM,gBACND,MAAOK,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAQa,EAAEC,OAAOpB,UAEtC,cAACiB,EAAA,EAAD,CACIH,UAAU,SACVO,QAAM,EACNpB,MAAM,WACND,MAAOI,EACPc,SAAU,SAACC,GAAD,OA1BRG,EA0B4BH,EAAEC,OAAOpB,MAzBvDG,EAAYmB,QACZhB,EAAQ,IAFS,IAACgB,GAqBN,SAOSvB,EAAWwB,KAAI,SAAAC,GAAM,OAClB,cAACC,EAAA,EAAD,CAA6BzB,MAAOwB,EAAOvB,MAA3C,SACKuB,EAAOxB,OADGwB,EAAOvB,qBCSvCyB,G,MAtDK,SAAC,GAA2C,IAA1CrB,EAAyC,EAAzCA,KAAMD,EAAmC,EAAnCA,SAAUuB,EAAyB,EAAzBA,SAAUpB,EAAe,EAAfA,UAC5C,OAEI,sBAAKO,UAAU,WAAf,UAGQa,EAAS,IAAMtB,GAAqB,OAAbD,GACnB,uBACIwB,IAAKD,EAAS,GAAGE,UAAU,IAAMF,EAAS,GAAGE,UAAU,GAAGC,MAC1DC,MAAO,CAACC,gBAAiB,OAAQC,aAAc,IAC/CC,UAAQ,EAHZ,yDAWG,KAAT7B,EACE,sBAAMS,UAAU,WAAhB,gDAEAa,EAASJ,KAAI,SAACY,GAAD,OACVA,EAAKR,SAASJ,KAAI,SAACa,GAAD,OACfA,EAAKC,YAAYd,KAAI,SAACe,GAAD,OACnB,sBACGxB,UAAU,aACViB,MAAO,CACHC,gBAAiBzB,EAAY,UAAY,QACzCgC,MAAOhC,EAAY,QAAU,SAJpC,UAMI,mBAAGwB,MAAO,CAACQ,MAAO,WAAlB,SAA+BD,EAAIE,aACnC,oBAAIT,MAAO,CAAEC,gBAAiB,UAAWO,MAAO,UAAWE,MAAO,UACjEH,EAAII,SACD,uBAAMX,MAAO,CAACY,WAAY,WAAYC,WAAY,OAAlD,UACI,0CACCN,EAAII,WAGZJ,EAAIO,UACD,uBAAMd,MAAO,CAACY,WAAY,WAAYC,WAAY,OAAlD,UACI,2CACCN,EAAIO,SAAStB,KAAI,SAACuB,GAAD,gBAAUA,EAAV,6B,QC+DvCC,MAlGf,WAEE,MAAwBC,mBAAS,IAAjC,mBAAO3C,EAAP,KAAaC,EAAb,KAGA,EAAgC0C,mBAAS,IAAzC,mBAAOrB,EAAP,KAAiBsB,EAAjB,KAIA,EAAgCD,mBAAS,MAAzC,mBAAO5C,EAAP,KAAiBD,EAAjB,KAGA,EAAkC6C,oBAAS,GAA3C,mBAAOzC,EAAP,KAAkB2C,EAAlB,KAGMC,EAAWC,YAAW,CAC1BC,WAAY,CACVd,MAAOe,IAAK,KACZ,YAAa,CACXf,MAAOe,IAAK,MAEd,qBAAsB,CACpBtB,gBAAiBsB,IAAK,OAG1BC,QAAS,GACTC,MAAO,IAXQJ,CAYdK,KAGGC,EAAa,uCAAG,4BAAAC,EAAA,+EAEGC,IAAMC,IAAN,uDAG+BzD,EAH/B,YAG2CC,IAL9C,OAEVyD,EAFU,OAQhBC,QAAQC,IAAIF,GAEZb,EAAYa,EAAKA,MAVD,gDAalBC,QAAQC,IAAR,MAbkB,yDAAH,qDA0BnB,OANAC,qBAAU,WACRP,MACC,CAACrD,EAAMD,IAKR,qBAAKU,UAAU,MACbiB,MAAO,CACLmC,OAAQ,QAASlC,gBAAiBzB,EAAY,UAAY,UAC1DgC,MAAOhC,EAAY,QAAU,QAC7B4D,WAAY,kBAJhB,SAOA,eAACC,EAAA,EAAD,CACEC,SAAS,KACTtC,MAAO,CAAEuC,QAAS,OAAQC,cAAe,SAAUL,OAAQ,QAASM,eAAgB,UAFtF,UAMA,sBAAKzC,MAAO,CAAE0C,SAAU,WAAYC,IAAK,EAAGC,MAAO,GAAIC,WAAY,IAAnE,UAGE,+BAAOrE,EAAY,OAAS,UAC5B,cAAC4C,EAAD,CACEI,QAAShD,EACTW,SAAU,kBAAMgC,GAAc3C,MANlC,OAYE,cAAC,EAAD,CACEH,SAAUA,EACVD,YAAaA,EACbE,KAAMA,EACNC,QAASA,EACTC,UAAWA,IAGXoB,GACA,cAAC,EAAD,CAAatB,KAAMA,EAAMsB,SAAUA,EAAUvB,SAAUA,EAAUG,UAAWA,UCzF9EsE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BjC,QAAQC,IACN,+GAKEqB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB3B,QAAQC,IAAI,sCAGRqB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACNrC,QAAQqC,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,qCAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,qCAAN,sBAEPtC,IAgEV,SAAiCO,EAAOC,GAEtCkC,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAACgC,GAEL,IAAMC,EAAcD,EAASD,QAAQ3D,IAAI,gBAEnB,MAApB4D,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMpC,MAAK,SAACC,GAClCA,EAAaoC,aAAarC,MAAK,WAC7BV,OAAOC,SAAS+C,eAKpB5C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLpC,QAAQC,IAAI,oEAtFVgE,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMpC,MAAK,WACjC1B,QAAQC,IACN,+GAMJmB,EAAgBC,EAAOC,OE/B/B4C,GAGA5B,K","file":"static/js/main.fb653b18.chunk.js","sourcesContent":["const categories = [\n  { value: \"English\", label: \"en\" },\n  { value: \"Hindi\", label: \"hi\" },\n  { value: \"Spanish\", label: \"es\" },\n  { value: \"French\", label: \"fr\" },\n  { value: \"Japanese\", label: \"ja\" },\n  { value: \"Russian\", label: \"ru\" },\n  { value: \"German\", label: \"de\" },\n  { value: \"Italian\", label: \"it\" },\n  { value: \"Korean\", label: \"ko\" },\n  { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\n  { value: \"Arabic\", label: \"ar\" },\n  { value: \"Turkish\", label: \"tr\" },\n];\n  \nexport default categories;","import { createMuiTheme, MenuItem, TextField, ThemeProvider } from '@material-ui/core';\nimport React from 'react'\nimport './Header.css';\nimport categories from '../../data/category'\n\n// 5.2 receiving category and set getCategory in the header(distructuring)\n// 5.5 receiving the word and setWord in header\n// 10.7 receiving the LightMode in header\nconst Header = ({ setCategory, category, word, setWord, LightMode }) => {\n    //4.2 adding the darkTheme form Material UI\n    const darkTheme = createMuiTheme({\n        palette: {\n            primary: {\n                main: LightMode ? \"#000\" : \"#fff\"   // 10.8\n            },\n            type: LightMode ? \"light\" : \"dark\"      // 10.8\n        },\n    });\n\n    //7. creating new func for when changing the lang it should remove the searched work and its title\n    const handleChange = (language) => {\n        setCategory(language)\n        setWord(\"\");\n    }\n\n\n    return (\n        //4.1 Creating the header\n        <div className=\"header\">\n            {/* 6. changing the title using ternary operators*/}\n            <span className=\"title\">{word ? word : \"Word Hunt\"} </span>           \n            <div className=\"inputs\">\n                {/* adding darkTheme for the input */}\n                <ThemeProvider theme={darkTheme}>\n                    {/* 5.3 adding the label for the word input */}\n                    <TextField \n                        className=\"search\" \n                        label=\"Search a Word\" \n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                    />\n                    <TextField\n                        className=\"select\"\n                        select\n                        label=\"Language\"\n                        value={category}\n                        onChange={(e) => handleChange(e.target.value)}\n                        >\n                            {categories.map(option => (\n                                <MenuItem key={option.label} value={option.label}>\n                                    {option.value}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                </ThemeProvider>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './Definitions.css'\n\n//9.1 receiving the word ...\nconst Definitions = ({word, category, meanings, LightMode}) => {\n    return (\n\n        <div className=\"meanings\">\n            {\n                //adding the Audio\n                meanings[0] && word && category === 'en' && (\n                    <audio \n                        src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio} \n                        style={{backgroundColor: \"#fff\", borderRadius: 10}}\n                        controls\n                        >\n                        Your Browser doesn't support audio element.\n                    </audio>\n                )\n            }\n\n            {/* 9.2 notice the usage of ternary operators */}\n            { word === \"\" ? ( \n                <span className=\"subTitle\"> Start by typing a word in Search </span>\n            ) : (\n                meanings.map((mean) => \n                   mean.meanings.map((item) => \n                      item.definitions.map((def) => (\n                        <div \n                           className=\"singleMean\"\n                           style={{ \n                               backgroundColor: LightMode ? \"#dbcbb4\" : \"white\", \n                               color: LightMode ? \"white\" : \"black\" }}    \n                        >\n                            <b style={{color: \"#E85A4F\"}}>{def.definition}</b>\n                            <hr style={{ backgroundColor: \"#dadada\", color: \"#dadada\", width: \"100%\" }}/>\n                            {def.example && (\n                                <span style={{fontFamily: \"larsseit\", fontWeight: \"500\"}}>\n                                    <b>Example: </b>\n                                    {def.example}\n                                </span>\n                            )}\n                            {def.synonyms && (\n                                <span style={{fontFamily: \"larsseit\", fontWeight: \"500\"}}>\n                                    <b>Synonyms: </b>\n                                    {def.synonyms.map((s) => `${s}, `)}\n                                </span>\n                            )}\n                          </div>\n                      ))\n                   )\n                )\n            )}\n        </div>\n    );\n}\n\n\nexport default Definitions\n","import axios from \"axios\";\nimport { Container, Switch, withStyles } from '@material-ui/core';\nimport './App.css';\nimport {useEffect, useState} from \"react\"\nimport Header from \"./Components/Header/Header\"\nimport './Components/Definitions/Definitions.css';\nimport Definitions from \"./Components/Definitions/Definitions\";\nimport { grey } from \"@material-ui/core/colors\";\n\n\nfunction App() {\n  //4. creating another state for word\n  const [word, setWord] = useState(\"\");\n\n  //3. initializing the state\n  const [meanings, setMeanings] = useState([]);\n  //     -variable  -functionForChangingTheState       -Going to be the initial state\n  \n  //5. creating another state for the language category\n  const [category, setCategory] = useState(\"en\")\n\n  //10.2 creating another state for Modes\n  const [LightMode, setLightMode] = useState(false)\n\n  //10. adding the switch for switching the theme\n  const DarkMode = withStyles({\n    switchBase: {\n      color: grey[300],\n      '&$checked': {\n        color: grey[500],\n      },\n      '&$checked + $track': {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n  //1.we need a async func for fetching from the API\n  const dictionaryApi = async() => {\n    try {\n        const data = await axios.get(\n          // 8. for changing the API we need to use the ``\n          // \"https://api.dictionaryapi.dev/api/v2/entries/en/plane\" \n          `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n        );\n\n        console.log(data)\n        //3.1 just getting the meanings\n        setMeanings(data.data)\n       \n    } catch (err) {\n      console.log(err)\n    }\n  };\n\n  // console.log(meanings);\n \n  //2.after fetching we need to call the API and for that we use useEffect\n  useEffect(() => {\n    dictionaryApi();\n  }, [word, category])  //8.1 we need to call this API every time we change our word or category.\n  \n\n\n  return ( \n    <div className=\"App\" \n      style={{ \n        height: \"100vh\", backgroundColor: LightMode ? \"#EAE7DC\" : \"#24305E\",\n        color: LightMode ? \"black\" : \"white\", \n        transition: \"all .4s linear\"\n    }}\n    >\n    <Container \n      maxWidth=\"md\" \n      style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\", justifyContent: \"evenly\" }}\n    >\n    \n    {/* 10.1  adding Dark and Light Mode */}\n    <div style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}>\n      \n      {/* 10.5 Changing the word when toggling the mode */}\n      <span>{LightMode ? \"Dark\" : \"Light\"}</span>\n      <DarkMode \n        checked={LightMode} \n        onChange={() => setLightMode(!LightMode)}\n      /> {/* 10.4 setting the darkMode by default */}\n    </div>\n\n      {/* 4. Creating Header component     */}\n      {/* 5.1 passing it as a prop*/}\n      <Header \n        category={category} \n        setCategory={setCategory} \n        word={word}     // 5.4 passing the word and setWord in header\n        setWord={setWord}\n        LightMode={LightMode} //10.6 passing the Modes for the header\n      />\n      {/* 9. Creating the box for the meanings and sending the word, category meanings*/}\n      { meanings && (       //9.3 means if its something inside meanings then the definition will be rendered.\n        <Definitions word={word} meanings={meanings} category={category} LightMode={LightMode}/> //passing it to the definitions\n        )}                                                                    \n    </Container>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n\nreportWebVitals();"],"sourceRoot":""}